// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dJqK6LEBeKixAKagJBAmzL
// Component: ThJz7UjPOLc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: R7FQakg198I/component

import { useScreenVariants as useScreenVariantsvWlfn14Jm89In } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: vWLFN14Jm89IN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_iddr.module.css"; // plasmic-import: dJqK6LEBeKixAKagJBAmzL/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: ThJz7UjPOLc/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: WhOp2OsiY-D/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: g3M_pomcN7I/icon
import MenuSvgrepoComsvgIcon from "./icons/PlasmicIcon__MenuSvgrepoComsvg"; // plasmic-import: XTdEHy648t/icon
import CloseBoldSvgrepoComsvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComsvg"; // plasmic-import: 3wjTpps_Fo/icon

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {
  isMenuOpen?: boolean;
  onIsMenuOpenChange?: (val: boolean) => void;
};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>(
  "isMenuOpen",
  "onIsMenuOpenChange"
);

export type PlasmicNavbar__OverridesType = {
  navbar?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultNavbarProps {
  isMenuOpen?: boolean;
  onIsMenuOpenChange?: (val: boolean) => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isMenuOpen",
        type: "writable",
        variableType: "boolean",

        valueProp: "isMenuOpen",
        onChangeProp: "onIsMenuOpenChange"
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvWlfn14Jm89In()
  });

  return (
    <div
      data-plasmic-name={"navbar"}
      data-plasmic-override={overrides.navbar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.navbar
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wvXmR)}>
        <p.PlasmicLink
          className={classNames(projectcss.all, projectcss.a, sty.link___85NvS)}
          component={Link}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"42px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/iddr/images/iddrLandscape1Png.png",
              fullWidth: 904,
              fullHeight: 251,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__loRq6)}
          >
            <Button2
              className={classNames("__wab_instance", sty.button2__tv0AO)}
              color={"clear" as const}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__lvIl)}
                  role={"img"}
                />
              }
              link={"#home" as const}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__nLjGo)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xoUg
                )}
              >
                {"Beranda"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__ftYfy)}
              color={"clear" as const}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg___4UxP0)}
                  role={"img"}
                />
              }
              link={"#about" as const}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__xfMrD)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jYoH9
                )}
              >
                {"Tentang"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__y1Coc)}
              color={"clear" as const}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__sw0DB)}
                  role={"img"}
                />
              }
              link={"#team" as const}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__tlCCc)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cEfr
                )}
              >
                {"Tim"}
              </div>
            </Button2>
            <Button2
              className={classNames("__wab_instance", sty.button2__wBug2)}
              color={"clear" as const}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__gYYm)}
                  role={"img"}
                />
              }
              link={"#contact" as const}
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg___6Crw3)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u9Uja
                )}
              >
                {"Kontak"}
              </div>
            </Button2>
          </p.Stack>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__dInIj
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};
              $steps["updateIsMenuOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "LBkPAXwzI",
                          componentUuid: "ThJz7UjPOLc",
                          argName: "variable"
                        },
                        () => ({
                          objRoot: $state,
                          variablePath: ["isMenuOpen"]
                        })
                      ),
                      operation: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "LBkPAXwzI",
                          componentUuid: "ThJz7UjPOLc",
                          argName: "operation"
                        },
                        () => 4
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "LBkPAXwzI",
                        componentUuid: "ThJz7UjPOLc"
                      },
                      () =>
                        (({ variable, value, startIndex, deleteCount }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = p.get(objRoot, variablePath);
                          p.set(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["updateIsMenuOpen"] === "object" &&
                typeof $steps["updateIsMenuOpen"].then === "function"
              ) {
                $steps["updateIsMenuOpen"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "LBkPAXwzI",
                    componentUuid: "ThJz7UjPOLc"
                  },
                  $steps["updateIsMenuOpen"]
                );
              }
            }}
            platform={"nextjs"}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <MenuSvgrepoComsvgIcon
                className={classNames(projectcss.all, sty.svg__dMoHh)}
                role={"img"}
              />
            ) : null}
          </p.PlasmicLink>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__agVnM
            )}
            component={Link}
            platform={"nextjs"}
          >
            <CloseBoldSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__al8He)}
              role={"img"}
            />
          </p.PlasmicLink>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navbar: ["navbar", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navbar: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navbar") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("navbar"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
