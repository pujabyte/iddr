// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dJqK6LEBeKixAKagJBAmzL
// Component: S-EPZS57Iq32

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: R7FQakg198I/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariantsvWlfn14Jm89In } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: vWLFN14Jm89IN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_iddr.module.css"; // plasmic-import: dJqK6LEBeKixAKagJBAmzL/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: S-EPZS57Iq32/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: WhOp2OsiY-D/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: g3M_pomcN7I/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<"button">;
  title?: p.Flex<"div">;
  desc?: p.Flex<"div">;
  desc2?: p.Flex<"div">;
  desc3?: p.Flex<"div">;
  desc4?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsvWlfn14Jm89In()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vB9)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nm9P)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__m8LLa)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jCa58)}
                  >
                    {true ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__eIlN)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"40px" as const}
                        src={{
                          src: "/plasmic/iddr/images/image.svg",
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        }}
                      />
                    ) : null}
                  </div>
                ) : null}
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x46Mh)}
                >
                  <Button2
                    className={classNames("__wab_instance", sty.button2__hErsP)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__k4Xh6)}
                        role={"img"}
                      />
                    }
                    link={"#home" as const}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__jOt3W)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u9IM4
                      )}
                    >
                      {"Beranda"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__vc9Ki)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__cat65)}
                        role={"img"}
                      />
                    }
                    link={"#about" as const}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__hnGvC)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v0MVp
                      )}
                    >
                      {"Tentang"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__fi9Zq)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__i8HHl)}
                        role={"img"}
                      />
                    }
                    link={"#team" as const}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__k2Jh1)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__py3X3
                      )}
                    >
                      {"Tim"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames(
                      "__wab_instance",
                      sty.button2___0RO6L
                    )}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__j97D4)}
                        role={"img"}
                      />
                    }
                    link={"#contact" as const}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__wlRsu)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wU8S0
                      )}
                    >
                      {"Kontak"}
                    </div>
                  </Button2>
                </p.Stack>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vtYeU)}
                  >
                    {false ? (
                      <button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button
                        )}
                      >
                        {"Sign up"}
                      </button>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
            <div
              className={classNames(projectcss.all, sty.freeBox__zoEqj)}
              id={"home" as const}
            >
              <div className={classNames(projectcss.all, sty.columns__a7Wpx)}>
                <div className={classNames(projectcss.all, sty.column__jxi8B)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vKCwj)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__i1R4B)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__yy5X
                        )}
                      >
                        {"Indonesia Digital Rupiah"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ozbDf
                        )}
                      >
                        {
                          "Inovasi Mata Uang Digital Nusantara untuk menghubungkan dunia digital dengan Rupiah anda"
                        }
                      </div>
                    </p.Stack>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___76SmK
                      )}
                    >
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__z2Xv0
                        )}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qnYOn
                            )}
                            role={"img"}
                          />
                        }
                        link={"#about" as const}
                        shape={"rounded" as const}
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__oSb3
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s92Eu
                          )}
                        >
                          {"Pelajari Selengkapnya ->"}
                        </div>
                      </Button2>
                    </p.Stack>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.column__pkUaO)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yRaAm)}
                  />
                </div>
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___1Seb)}
            id={"about" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yOjcJ)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__aqzXj)}
              >
                <div className={classNames(projectcss.all, sty.column___3Atbj)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fRwtX)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__zj4R3)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/iddr/images/indonesianMappng.png",
                          fullWidth: 780,
                          fullHeight: 349,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  ) : null}
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__sBMrx)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___8GbGd
                    )}
                  >
                    {"Tentang Indonesia Digital Rupiah"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qEweM
                    )}
                  >
                    {
                      "Indonesia Digital Rupiah adalah mata uang digital terkini yang dirancang untuk mendukung kemajuan ekonomi dan teknologi di Indonesia. Menggabungkan keamanan, kecepatan, dan efisiensi blockchain dengan nilai dan stabilitas Rupiah, Indonesia Digital Rupiah menjadi solusi yang inovatif dalam era digital. Dengan menggunakan Indonesia Digital Rupiah, Anda dapat melakukan transaksi digital secara mudah, aman, dan cepat, baik dalam negeri maupun lintas batas. Bergabunglah dengan revolusi mata uang digital Indonesia dan rasakan kemudahan serta manfaatnya dalam kehidupan sehari-hari."
                    }
                  </div>
                </p.Stack>
              </p.Stack>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__aO8ZD)}
            id={"team" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__u44ZL)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.title)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__lcmKs
                    )}
                  >
                    {"Tim kami"}
                  </h2>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__q6QAz
                    )}
                  >
                    {
                      "Kami bekerja dengan pengalaman dan keahlian terbaik di industri keuangan."
                    }
                  </h6>
                </p.Stack>
              ) : null}
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__fle2K)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__zemhk)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__snFUf)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"200px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/iddr/images/fandy3Png.png",
                      fullWidth: 800,
                      fullHeight: 800,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      data-plasmic-name={"desc"}
                      data-plasmic-override={overrides.desc}
                      className={classNames(projectcss.all, sty.desc)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__m9BXi
                        )}
                      >
                        {"Fandy Label Honggono"}
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xR4Td
                        )}
                      >
                        {"CEO"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__fspdn)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fb6Tc)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"200px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/iddr/images/janepng.png",
                      fullWidth: 550,
                      fullHeight: 551,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      data-plasmic-name={"desc2"}
                      data-plasmic-override={overrides.desc2}
                      className={classNames(projectcss.all, sty.desc2)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__wgtoG
                        )}
                      >
                        {"Jane Malinda Sutanto"}
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zkNPq
                        )}
                      >
                        {"CFO"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__pqdDq)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zm4Za)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"200px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/iddr/images/yulipng.png",
                      fullWidth: 638,
                      fullHeight: 638,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      data-plasmic-name={"desc3"}
                      data-plasmic-override={overrides.desc3}
                      className={classNames(projectcss.all, sty.desc3)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__e2PYc
                        )}
                      >
                        {"Yuli"}
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ru41U
                        )}
                      >
                        {"Finance Advisor"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__r3B0Q)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nYfBr)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"200px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/iddr/images/willypng.png",
                      fullWidth: 1200,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      data-plasmic-name={"desc4"}
                      data-plasmic-override={overrides.desc4}
                      className={classNames(projectcss.all, sty.desc4)}
                    >
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__rBQoC
                        )}
                      >
                        {"Willyanto Wijaya S"}
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yNzgW
                        )}
                      >
                        {"Technical Advisor"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__dAw1O)}
            id={"contact" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lcmS1)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__vDqJ9)}
              >
                <div className={classNames(projectcss.all, sty.column__jtIQ)}>
                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"title2"}
                      data-plasmic-override={overrides.title2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.title2)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__h17U4
                        )}
                      >
                        {"Kontak"}
                      </h2>
                      <h6
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6__dLzMm
                        )}
                      >
                        {"Let’s Work Together"}
                      </h6>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__exB6N
                        )}
                      >
                        {
                          "JL. Jend. Sudirman Kav 21, Kel. Karet Kuningan, Kec. Setiabudi, Jakarta Selatan, DKI Jakarta, Indonesia 12920\n\ninfo@iddr.io"
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.column__haRrA)}>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ('<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d15865.606422642355!2d106.8222893!3d-6.2106448!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x2e69f55e2d3fbe1f%3A0x9a3af0621b70d07f!2sWeWork%20Sinarmas%20MSIG%20Tower!5e0!3m2!1sen!2sid!4v1684983001341!5m2!1sen!2sid" width="360" height="460" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>' as const)
                        : ('<iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d15865.606422642355!2d106.8222893!3d-6.2106448!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x2e69f55e2d3fbe1f%3A0x9a3af0621b70d07f!2sWeWork%20Sinarmas%20MSIG%20Tower!5e0!3m2!1sen!2sid!4v1684983001341!5m2!1sen!2sid" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>' as const)
                    }
                  />
                </div>
              </p.Stack>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tk5Ht)}>
            <div className={classNames(projectcss.all, sty.freeBox__niorR)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uwzXi
                )}
              >
                {"© 2023 by Indonesia Digital Rupiah"}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "title",
    "desc",
    "desc2",
    "desc3",
    "desc4",
    "title2",
    "embedHtml"
  ],
  button: ["button"],
  title: ["title"],
  desc: ["desc"],
  desc2: ["desc2"],
  desc3: ["desc3"],
  desc4: ["desc4"],
  title2: ["title2"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
  title: "div";
  desc: "div";
  desc2: "div";
  desc3: "div";
  desc4: "div";
  title2: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    title: makeNodeComponent("title"),
    desc: makeNodeComponent("desc"),
    desc2: makeNodeComponent("desc2"),
    desc3: makeNodeComponent("desc3"),
    desc4: makeNodeComponent("desc4"),
    title2: makeNodeComponent("title2"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
